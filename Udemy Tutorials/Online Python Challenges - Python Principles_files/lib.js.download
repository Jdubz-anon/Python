
function log_event(category, action, item) {
	ga('send', 'event', "other", category, null);
}

function ga_funnel (point) {
	ga('send', 'event', 'funnel', point, null);
}

var Base64 = {

    // private property
    _keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",

    // public method for encoding
    encode : function (input) {
        var output = "";
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
        var i = 0;

        input = Base64._utf8_encode(input);

        while (i < input.length) {

            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);

            enc1 = chr1 >> 2;
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
            enc4 = chr3 & 63;

            if (isNaN(chr2)) {
                enc3 = enc4 = 64;
            } else if (isNaN(chr3)) {
                enc4 = 64;
            }

            output = output +
            this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +
            this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);

        }

        return output;
    },


    // private method for UTF-8 encoding
    _utf8_encode : function (string) {

		// why was this even here???
        // string = string.replace(/\r\n/g,"\n");

        var utftext = "";

        for (var n = 0; n < string.length; n++) {

            var c = string.charCodeAt(n);

            if (c < 128) {
                utftext += String.fromCharCode(c);
            }
            else if((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            }
            else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }

        }

        return utftext;
    }
}

function base64_encode (data) {
	// return btoa(data);
	return Base64.encode(data);
}

function base64_decode (data) {
	try {
		return atob(data).toString();
	}
	catch (err) {
		return data;
	}

}

function log (data, cb) {
	if (cb == null) {
		cb = function () {};
	}

	$.post({
		url: LOG_URL,
		data: base64_encode(data),
		dataType: "text",
		complete: cb
	});

}

function show (item) {
	item.style.display = "inline-block";
}

function hide (item) {
	item.style.display = "none";
}

function toggle_fold (name) {
	var content = document.getElementById(name + "-content");
	var up = document.getElementById(name + "-uparrow");
	var down = document.getElementById(name + "-downarrow");
	if (content.style["display"] == "none") {
		content.style["display"] = "block";
		up.style["display"] = "block";
		down.style["display"] = "none";
	}
	else {
		content.style["display"] = "none";
		up.style["display"] = "none";
		down.style["display"] = "block";
	}
}
